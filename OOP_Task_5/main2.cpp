#include "cFile.h"
#include  "cElement.h"
#include <windows.h>
using namespace std;

void main()
{
	//I had a complete menu structure but didn't have enought time to complete it (excuses, I know)

	//creating the file
	cFile < cElement > text("ROFL.txt");
	int WOOT, i;

	//creating an array of the test element kind

	cElement /****/aDigitArray[4] = { 1, 3, 3, 7 };

	/*
	cout << "Please enter the amount of digits in the cElement array:" << endl;
	fflush(stdin);
	cin >> WOOT;

	aDigitArray = new cElement*[WOOT];
	*/

	cout << "Please enter 4 'init's to enter into the array." << endl << endl;
	for (i = 0; i < 4; i++)
	{
		cout << "Enter digit #" << i << " that you'd like to have in the array." << endl;
		fflush(stdin);
		cin >> /***/aDigitArray[i];
		cout << endl;
	}
	/*
	cout << "How many of the cElement's you've entered would you like to write to the file?" << endl;
	cout << "Note: Entering to write into the file will use the standard write function," << endl << "Write a smaller number and the 'void write(T** &apBuf, int aNum' function would be used" << endl;
	fflush(stdin);
	cin >> WOOT;

	if(woot < 4)
	{

	}
	else 
	*/

	//writing the array into the file.
	for (i = 0; i < 4; i++)
	{
		text.write(/***/aDigitArray[i]);
	}

	//Reading from the file if the users comply.
	cout << "Would you like to read the elements from the file and print them?" << endl << "Enter 1 for yes and 0 for no" << endl;
	fflush(stdin);
	cin >> WOOT;

	if(WOOT)
	{

		for (i = 0; i < 4; i++)
		{
			cout << text.read() << endl << endl;
		}

		HANDLE hcon = GetStdHandle(STD_OUTPUT_HANDLE);
		SetConsoleTextAttribute(hcon, 2);
		cout << "**********************************************" << endl;
		cout << "**********Pentagon security system.***********" << endl;
		cout << "**********************************************" << endl << endl;
		cout << "**********************************************" << endl;
		for (i = 0; i < 20; i++)
		{
			cout << "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491268873493918703798214391672064590869651897225691698509990310203096657363301877215791078781426445725617411584185877699635635291576611517161175561912146377213801136522636271278503521453330658424042719346570805618056428626998831932727372468508080637253458677431435647134329913610845871145670176806024156398745240385833637939835633934944595030714427694213921659335151610028068260018621710802758990916345462460226985867174542310977297306019504557502121786672926863366512580710505001747213369207269807192779063301291903342918220130117130206861246373615361763948055611226790359599834582073680303215605083664016691546402608726050665198490757496212963311920460864247010599662752040679908521111887393952622217171839456743584366250259407567787455206883177021018226392892933319946189556214339398753777418233490776385599354008719353215578106343492646921668019730695877934717222544807911811119639263927648001235177257192747883057839711366906064552543319190322289193609549718432491009045406627292385027405633838548590188268149435843645843980262611116171765842816097957652506787611795116323992635170032619534150929750553404886640965835191659794919350863488219261598144843692437545565112204194805526823075332476974088472778743545235927210880405262583536868919931984460989716084467426367359168005528478634062691271721731717560616771714634755616198078843903113584777164260510474745766361438320854993672197457399797866522775035398061891408888385909321374375272033623025787795610472928563860851309157784649600087363339203104897781691990454837211576932614722101693733956770865691376111086915327835405568948605071082295424809180558080958528406673528781480386538021466467571438965475808604345129553935513095869321108629931110605839939424965760106574952402644946365524442407305990365284908966648040467945517605689027631717191876872772574890336567177856382321653056921291150503264128157327075011383551978930940891074880342610908827414137119409123094371678696136360724776571046234861504060685470464577187891660382140143475097305369103110844079695504562377538119827552159521365018775633970735439580120471966019512882510545033173051621634109051819226052554631226435532259295747572882001626270808236042444590358136199045960449167540375537272061819889995147771614932760797999354053231793037435275849954268171872137473000259335615361921111292936425013887117023275555779302266785803199930810830576307652332050740013939095807901637717629259283764874790177274125678190555562180504876746991140839977919376542320623374717324703369763357925891515260315614033321272849194418437150696552087542450598956787961303311646283996346460422090106105779458151" << endl;
		}
		cout << "**********************************************" << endl;
		cout << "**********Pentagon security system.***********" << endl;
		cout << "**********************************************" << endl;
		cout << "**********************************************" << endl;
		cout << "**********************************************" << endl;
		cout << "********You Have succesfully logged in.*******" << endl;
		cout << "*********How would you like to proceed?*******" << endl;
		cout << "**********************************************" << endl << endl << endl << endl;

		fflush(stdin);
		cin >> WOOT;
	}

}
